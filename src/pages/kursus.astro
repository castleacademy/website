---
import Layout from "~/layouts/Layout.astro";
import CourseCard from "~/components/course/course-card.astro";
import CourseCardImage from "~/components/course/course-card-image.astro";
import CourseCardContent from "~/components/course/course-card-content.astro";
import CourseCardHeader from "~/components/course/course-card-header.astro";
import CourseCardInstructor from "~/components/course/course-card-instructor.astro";
import CourseCardFooter from "~/components/course/course-card-footer.astro";
import CourseDialog from "~/components/course/course-dialog.astro";
import CourseDialogTrigger from "~/components/course/course-dialog-trigger.astro";

import { contentfulClient } from "~/lib/contentful";
import type { CourseSkeleton} from "~/lib/types";
import HeroBackground from "~/components/background/hero-background.astro";

function getTutor(link: any): { name?: string; rating?: number } {
  const anyLink = link as { fields?: { name?: string; rating?: number } } | undefined;
  return anyLink?.fields ?? {};
}

const courses = await contentfulClient.getEntries<CourseSkeleton>({
  content_type: "course",
});

const coursesData = courses.items.map(course => {
  const tutor = getTutor(course.fields.tutor);
  return {
    id: course.sys.id,
    name: course.fields.name,
    price: course.fields.price,
    tutor: {
      name: tutor.name || "Instructor",
      rating: tutor.rating || 4.5
    }
  };
});
---

<Layout>
  <HeroBackground />
  <section class="container min-h-screen relative z-10">
    <div class="flex flex-col items-center text-center mb-7 mt-28">
      <h1 class="text-2xl sm:text-3xl lg:text-4xl font-bold mb-4">
        Semua Kursus
      </h1>
      <p class="text-gray-600 mb-8 max-w-2xl">
        Temukan kursus yang tepat untuk mengembangkan skill dan pengetahuan Anda
      </p>
      
      <div class="flex w-full items-center gap-2 rounded-[10px] border px-3 py-2">
        <svg class="size-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
        <input
          id="search-input"
          type="text"
          placeholder="Cari kursus atau instruktur..."
          class="font-pt-sans w-full text-base focus:outline-none"
        />
      </div>
    </div>
    
    <div class="grid grid-cols-1 lg:grid-cols-2 items-center justify-center gap-4 lg:gap-6 mb-28">
    {courses.items.map((course) => (
      <CourseCard>
        <CourseCardImage />
        <CourseCardContent>
          <CourseCardHeader 
            title={course.fields.name} 
            badge="Populer" 
            badgeVariant="popular" 
          />
          <div class="flex flex-col justify-between items-stretch flex-1 relative">
            {(() => { const tutor = getTutor(course.fields.tutor); return (
              <CourseCardInstructor 
                name={tutor.name || "Instructor"} 
                rating={tutor.rating || 4.5}
              />
            ); })()}
            <CourseCardFooter price={course.fields.price} />
            <CourseDialogTrigger courseId={course.sys.id} />
            <CourseDialog 
              courseId={course.sys.id} 
              courseName={course.fields.name}
            >
              {/* Content akan diisi nanti */}
              <p>Konten dialog akan diisi sesuai kebutuhan</p>
            </CourseDialog>
          </div>
        </CourseCardContent>
      </CourseCard>
    ))}
  </div>
    
    <!-- No Results Message -->
    <div id="no-results" class="hidden text-center py-12">
      <p class="text-gray-500 text-lg">Tidak ada kursus yang ditemukan untuk pencarian Anda.</p>
    </div>
  </section>

  <script define:vars={{ coursesData }}>
    // Initialize search functionality
    const searchInput = document.getElementById('search-input');
    const coursesGrid = document.querySelector('.grid.grid-cols-1.lg\\:grid-cols-2');
    const noResults = document.getElementById('no-results');
    const courseCards = Array.from(coursesGrid.children);

    // Add data attributes to course cards for filtering
    courseCards.forEach((card, index) => {
      const courseId = coursesData[index]?.id;
      if (courseId) {
        card.setAttribute('data-course-id', courseId);
        card.setAttribute('data-course-name', coursesData[index]?.name || '');
        card.setAttribute('data-tutor-name', coursesData[index]?.tutor?.name || '');
      }
    });

    function filterCourses(searchTerm) {
      const filteredCards = courseCards.filter(card => {
        const courseName = card.getAttribute('data-course-name')?.toLowerCase() || '';
        const tutorName = card.getAttribute('data-tutor-name')?.toLowerCase() || '';
        const search = searchTerm.toLowerCase();
        
        return courseName.includes(search) || tutorName.includes(search);
      });

      if (filteredCards.length === 0) {
        noResults.classList.remove('hidden');
        coursesGrid.classList.add('hidden');
      } else {
        noResults.classList.add('hidden');
        coursesGrid.classList.remove('hidden');
        
        // Gunakan class hidden daripada inline style
        courseCards.forEach(card => card.classList.add('hidden'));
        filteredCards.forEach(card => card.classList.remove('hidden'));
      }
    }

    // Add event listener to search input
    searchInput.addEventListener('input', (e) => {
      filterCourses(e.target.value);
    });

    // Initialize with all courses visible
    filterCourses('');
  </script>
</Layout>